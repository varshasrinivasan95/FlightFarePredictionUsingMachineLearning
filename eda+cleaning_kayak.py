# -*- coding: utf-8 -*-
"""EDA+Cleaning_Kayak.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdkD3nsXnkSaxvYn1bXeGDFJEVfvnuGB

# Reading Dataset
"""

from google.colab import files
uploaded = files.upload()

print (uploaded['All_Merged.csv'][:200].decode('utf-8') + '...')

"""# Import Libraries"""

import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from natsort import index_natsorted
from datetime import datetime

"""# Data Exploration"""

df_flightdata = pd.read_csv(io.StringIO(uploaded['All_Merged.csv'].decode('utf-8')))

len(df_flightdata)

df_flightdata.shape

df_flightdata.info()

df_flightdata.head()

df_flightdata.tail()

df_flightdata.nunique()

df_flightdata.describe(include='all')

"""# Missing Value Treatment"""

df_flightdata.isnull().sum()

## Dropping the missing values
df_flightdata=df_flightdata.dropna()

df_flightdata.isnull().sum()

"""# Checking Duplicate Entries"""

df_flightdata.duplicated().sum()

## Dropping the duplicate values
df_flightdata=df_flightdata.drop_duplicates()

##Checking the duplicate rows again
df_flightdata.duplicated().sum()

"""**Duplicate rows will be removed in data cleaning phase**

# Univariate Analysis

#### **Booking Date Column**
"""

df_flightdata['BookingDate'].value_counts()

## Correcting the format for bookingdate column
# **Observation**


# *   We found that we have inappropriate values in the booking date column
# *   We plan to correct the bookingdate column type from object to date column
# df_flightdata.BookingDate = pd.to_datetime(df_flightdata['BookingDate']).dt.date

# df_flightdata['BookingDate'].value_counts()

plt.figure(figsize =(10,6))
plt.title('Percentage of data collected based on booking dates', fontsize=15, color='Blue')
df_flightdata["BookingDate"].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.ylabel('')
plt.show()

# df_flightdata.head(5)

"""**Observation**


*   There were less number of bookings made on 10-13-2022

#### **Origin Column**
"""

df_flightdata['origin'].value_counts()

plt.figure(figsize=(10,4))
sns.countplot(df_flightdata['origin'],color='lightgreen')
plt.title('Most Frequent takeoff City',fontsize=15)
plt.xlabel('City',fontsize=15)
plt.ylabel('Count',fontsize=15)
plt.show()

"""#### **Destination Column**"""

df_flightdata['destination'].value_counts()

"""**Observations**


*   We can see that destination column has a inappropriate value 'DEl' 
*   Replacing 'DEl' with 'DEL'


"""

df_flightdata['destination'] =df_flightdata['destination'].str.replace('DEl', 'DEL')

df_flightdata['destination'].value_counts()

plt.figure(figsize=(10,5))
sns.countplot(df_flightdata['destination'],color='lightblue')
plt.title('Destination Cities Count',fontsize=15)
plt.xlabel('Destination Cities',fontsize=15)
plt.ylabel('Count',fontsize=15)
plt.show()

"""#### **DepartureDate Column**"""

df_flightdata['DepartureDate'].value_counts()

## Correcting the format for DepartureDate column
# **Observation**


# *   We found that we have inappropriate values in the Departure date column
# *   We plan to correct the Departuredate column type from object to date column
# df_flightdata.DepartureDate = pd.to_datetime(df_flightdata.DepartureDate).dt.date

# df_flightdata['DepartureDate'].value_counts()

#### Plot for departure date

"""#### **Departure Time**"""

df_flightdata['deptime'].value_counts()

plt.figure(figsize = (16, 8))
sns.lineplot(data = df_flightdata, x = 'deptime', y= 'price')
plt.xticks(rotation=90)
plt.title('Ticket Price Versus Flight Departure Time')
plt.show()

"""#### **Arrival Time**"""

df_flightdata['arrtime'].value_counts()

plt.figure(figsize = (16, 8))
sns.lineplot(data = df_flightdata, x = 'arrtime', y= 'price')
plt.xticks(rotation=90)
plt.title('Ticket Price Versus Flight Arrival Time')
plt.show()

"""#### **Duration**"""

df_flightdata['Duration'].value_counts()

h = df_flightdata['Duration'].str.extract('(\d+)h', expand=False).astype(float) * 60
m = df_flightdata['Duration'].str.extract('(\d+)m', expand=False).astype(float)
df_flightdata['duration_mins'] = h.add(m, fill_value=0).astype(int).astype(str) + 'm'
df_flightdata['duration_mins']=df_flightdata['duration_mins'].str.strip('m')
df_flightdata['duration_mins'] = df_flightdata['duration_mins'].astype('int')

df_flightdata

##finding maximum (5) values for duration
max_duration = df_flightdata.sort_values(by='duration_mins', ascending=False)
max_duration.duration_mins.head()

"""**Observations**

*   We converted the duration string series data to time series data for easier calculation
*   The new duration is converted in mins
*   17h:10m is the maximum duration between the origin and the destination in our dataset

#### **Airlines Column**
"""

#Checking airlines count
df_flightdata['Airline'].value_counts()

## Spliting the airlines column baseed on the combined airlines name and saving it in a new column
df_flightdata[['flight_one','flight_two']] = df_flightdata.Airline.str.split(",",expand=True,)
df_flightdata

#getting unique airlines value (origin flights) along with the count
df_flightdata['flight_one'].value_counts()

sns.countplot(x='flight_one',data=df_flightdata,palette="Greens_d")
plt.xticks(rotation=90)

##Top most frequesnt Flights (origin)
freq_flights = df_flightdata.flight_one.value_counts().head(20).sort_values(ascending=False)
freq_flights

"""#### **Stop Column**"""

df_flightdata['stop'].value_counts()

"""**Observations**


*   The stop column has combination of values (numeric, string(categorical) with the column type of the data being object
*   We will change the values of this categorical column into a uniform value distribution (0,1,2)


"""

### Changing the values of the categorical column
df_flightdata['stop'] =df_flightdata['stop'].str.replace('direct', '0')

df_flightdata['stop'].value_counts()

stop_date=sns.countplot(x=df_flightdata["stop"])

"""**Observation**



*   We have a large number of direct flight data

#### **Currency Column**
"""

###Since currency column values are same for every row, We will remove the currency column 
df_flightdata=df_flightdata.drop(columns=['currency'])

"""#### **Days_left Column**"""

df_flightdata['days_left'].value_counts()

#### Removing the decimal from the days left column
df_flightdata['days_left'] = df_flightdata['days_left'].astype('int')

df_flightdata['days_left'].value_counts()

"""#### **Price Column**"""

df_flightdata['price'].value_counts()

# df_flightdata['price']=pd.to_numeric(df_flightdata['price'])

##Distribution of price value
sns.kdeplot(
    data=df_flightdata, 
    x="price", 
)

px.box(df_flightdata,x='price',orientation='h')

"""**Observations**

*   We can clearly see that price column has outliers starting from 10k and there is a maximum value around 33.328k
*   We plan on looking on the range of values and find the features which are trying to cause the outliers in price column

# Transformation

Data Transformation performed for matching with our Kaggle dataset

#### **Adding Class Column**
"""

## Adding a new class column to match with our Kaggle dataset
df_flightdata['class'] = 'Economy'

df_flightdata.head(5)

"""<!-- **Calculating Number of Days Left** -->

#### **Binning deptime into Early_Morning, Morning, Night, Evening, Afternoon**
"""

df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[2][1-3]:.*)', 'Night',regex=True)
df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[0-5]:.*)', 'Late_Night',regex=True)
df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[6-8]:.*)', 'Early_Morning',regex=True)
df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[9]:.*)|(^[1][0-1]:.*)', 'Morning',regex=True)
df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[1][2-7]:.*)', 'Afternoon',regex=True)
df_flightdata['deptime']= df_flightdata['deptime'].str.replace(r'(^[1][8-9]:.*)|(^[2][0]:.*)', 'Evening',regex=True)

df_flightdata['deptime'].value_counts()

df_flightdata.head(5)

plt.figure(figsize =(10,6))
plt.title('Percentage breakdown of flight departure time', fontsize=15, color='Green')
df_flightdata["deptime"].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.ylabel('')
plt.show()

"""#### **Binning arrtime into Early_Morning, Morning, Night, Evening, Afternoon**"""

df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[2][1-3]:.*)', 'Night',regex=True)
df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[0-5]:.*)', 'Late_Night',regex=True)
df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[6-8]:.*)', 'Early_Morning',regex=True)
df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[9]:.*)|(^[1][0-1]:.*)', 'Morning',regex=True)
df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[1][2-7]:.*)', 'Afternoon',regex=True)
df_flightdata['arrtime']= df_flightdata['arrtime'].str.replace(r'(^[1][8-9]:.*)|(^[2][0]:.*)', 'Evening',regex=True)

df_flightdata['arrtime'].value_counts()

df_flightdata.loc[df_flightdata['arrtime'] == '`']

df_flightdata.drop(df_flightdata[df_flightdata['arrtime'] >= '`'].index, inplace = True)

df_flightdata['arrtime'].value_counts()

df_flightdata.head(5)

plt.figure(figsize =(10,6))
plt.title('Percentage breakdown of flight arrival time', fontsize=15, color='Green')
df_flightdata["arrtime"].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.ylabel('')
plt.show()

"""#### **Dropping Columns Based on Kaggle Dataset**"""

###Dropping the dates,airline & duration columns to match with the Kaggle dataset 
df_flightdata=df_flightdata.drop(columns=['BookingDate'])
df_flightdata=df_flightdata.drop(columns=['DepartureDate'])

df_flightdata=df_flightdata.drop(columns=['Duration'])
df_flightdata=df_flightdata.drop(columns=['Airline'])

df_flightdata.head(5)

"""#### **Splitting the airlines column from one single column to 2 or 3 based on the number of stops**"""

len(df_flightdata[(df_flightdata['stop']=='1')&(df_flightdata['flight_two'].isnull())])

##Manipulating values in Flight_two column, if the number of stops is 1 and the value of flight two column is empty
df_flightdata["flight_two"]=np.where((df_flightdata['stop']=='1')&(df_flightdata['flight_two'].isnull()), df_flightdata['flight_one'],df_flightdata["flight_two"])

len(df_flightdata[(df_flightdata['stop']=='1')&(df_flightdata['flight_two'].isnull())])

df_flightdata[(df_flightdata['stop'])=='1']

df_flightdata[(df_flightdata['stop'])=='0']

## Checking the number of rows where stop =2 and there are no flight data about extra flights
len(df_flightdata[(df_flightdata['stop']=='2')&(df_flightdata['flight_two'].isnull())])

##Manipulating values in Flight Two column, if the number of stops is 2 and the value of flight two column is empty
df_flightdata["flight_two"]=np.where((df_flightdata['stop']=='2')&(df_flightdata['flight_two'].isnull()), df_flightdata['flight_one'],df_flightdata["flight_two"])

## Checking the number of rows where stop =2 and there are no flight data about extra flights
len(df_flightdata[(df_flightdata['stop']=='2')&(df_flightdata['flight_two'].isnull())])

df_flightdata[(df_flightdata['stop'])=='2']

df_flightdata["flight_three"] = 'None'

##Manipulating values in Flight_two column, if the number of stops is 1 and the value of flight two column is empty
df_flightdata["flight_three"]=np.where((df_flightdata['stop']=='2'), df_flightdata['flight_two'],df_flightdata["flight_three"])

df_flightdata[(df_flightdata['stop'])=='0']

"""#### **Rearranging the column ordering**"""

df_flightdata=df_flightdata.reindex(columns=['origin', 'destination','stop','flight_one', 'flight_two', 'flight_three','deptime','arrtime','days_left','duration_mins','class','price'])

df_flightdata.head(5)

df_flightdata[(df_flightdata['stop'])=='1'].head(5)

df_flightdata[(df_flightdata['stop'])=='2'].head(5)

"""# Bivariate Analysis

**Comparison between Price and Stop**
"""

sns.kdeplot(
    data=df_flightdata, 
    x="price",
    hue="stop", 
    multiple="stack"
)

sns.barplot(data=df_flightdata, x="arrtime", y="price").set(title='Price with respect to Arrival Time',xlabel='Arrival Time', ylabel='Price')

sns.barplot(data=df_flightdata, x="deptime", y="price").set(title='Price with respect to Departure Time',xlabel='Departure Time', ylabel='Price')

"""**Observations**


*   Price values are higher for direct flights and very less for flight travels with two transits

**Impact of arrival time with price**
"""

plt.figure(figsize = (15,7))
plt.subplot(1,2,1)
sns.boxplot(data=df_flightdata, x="arrtime", y="price")
plt.title("Arrival Time with Prices")
plt.show()

plt.figure(figsize = (15,7))
plt.subplot(1,2,2)
sns.boxplot(data=df_flightdata, x="deptime", y="price")
plt.title("Departure Time with Prices")
plt.show()

plt.figure(figsize = (15,8))
plt.subplot(1,2,1)
sns.boxplot(data=df_flightdata, x="origin", y="price")
plt.title("Source City with Prices")
plt.subplot(1,2,2)
sns.boxplot(data=df_flightdata, x="destination", y="price")
plt.title("Destination City with Prices")
plt.show()

plt.figure(figsize=(15,5))
sns.lineplot(data=df_flightdata,x='days_left',y='price',color='blue')
plt.title('Days Left For Departure Versus Ticket Price',fontsize=15)
plt.xlabel('Days Left for Departure',fontsize=15)
plt.ylabel('Price',fontsize=15)
plt.show()

"""**Observations**


*   Flight ticket prices are highest if days left for departure is very less

# Download To CSV
"""

df_flightdata.to_csv('cleaned_kayak.csv')
files.download("cleaned_kayak.csv")

"""# Multivariate Analysis"""

plt.figure(figsize = (16, 8))
sns.lineplot(data = df_flightdata, x = 'duration_mins', y= 'price', hue = 'stop')
plt.title('Ticket Price Versus Flight Duration Based on Class')
plt.show()

plt.figure(figsize = (16, 8))
sns.lineplot(data = df_flightdata, x = 'days_left', y= 'price', hue = 'flight_one')
plt.title('Ticket Price Versus Days Left')
plt.show()

# plt.figure(figsize=(18,6))
sns.catplot(data=df_flightdata, kind="bar", x="arrtime", y="price", hue="flight_one", height=6.5, aspect=12/6.5)
plt.title('Ticket price based on the Arrival time',fontsize=15)
plt.xlabel('Arrival Time',fontsize=15)
plt.ylabel('Price',fontsize=15)
plt.show()

# plt.figure(figsize=(18,6))
sns.catplot(data=df_flightdata, kind="bar", x="deptime", y="price", hue="flight_one", height=6.5, aspect=12/6.5)
plt.title('Ticket price based on the Departure time',fontsize=15)
plt.xlabel('Departure Time',fontsize=15)
plt.ylabel('Price',fontsize=15)
plt.show()

